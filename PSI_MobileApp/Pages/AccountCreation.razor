@page "/usercreateaccount"
@using AccountDataSerializer
@using Newtonsoft.Json
@using ProfileClasses
@using System.Collections.ObjectModel
@using System.Text.Json
@using ClassLibrary
@using System.ComponentModel.DataAnnotations
@implements IDisposable
@inject ExceptionLogger ExceptionLogger
@inject StateContainer StateContainer
@inject NavigationManager NavigationManager

<h3>Create new account</h3>
<!--<MudText> Test </MudText>-->
<MudForm @bind-isValid = "@isValid">
    <MudTextField T="string" Label="Username" @bind-Value="Username" Required="true" RequiredError="Field Username is required." />  <!--Validation="@(new Func<string, string>(IsUniqueUsername))" -->
    <MudTextField T="string" Label="Password" @bind-Value="Password" Required="true" RequiredError="Field Password is required." Validation="@(new Func<string, string>(ContainsWhitespace))"/>
    <MudTextField T="string" Label="Confirm Password" @bind-Value="Confirm" Required="true" RequiredError="Field Confirm Password is required." Validation="@(new Func<string, string>(IsIdentical))" />
    <MudTextField T="string" Label="Email" @bind-Value="Email" Required="true" RequiredError="Field Email is required." Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid."})" />
    <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!isValid)" Class="ml-auto" @onclick = "HandleSubmit">Register</MudButton>
</MudForm>

@code {
    //private readonly IDbContextFactory<ProjectDatabaseContext> _dbFactory;
    public bool isValid;
    public string Username;
    public string Password;
    public string Email;
    public string Confirm;
    public void HandleSubmit()
    {
        Profile profile = new();
        Account account = new();
        profile.Name = Username;
        profile.Email = Email;
        profile.Id = Guid.NewGuid();
        account.Id = profile.Id;
        account.Password = Password;
        account.UserName = Username;
        StateContainer.TempAccount = account;
        StateContainer.TempProfile = profile;
        if (StateContainer.CreatingDistributor)
        {
            NavigationManager.NavigateTo("inputcontactdata");
        }
        else
        {
            NavigationManager.NavigateTo("inputcontactdata");
        }
    }
    public string IsIdentical(string confirm)
    {

        if (String.Equals(confirm, Password))
        {
            return null;
        }
        return "Passwords do not match.";
    }

    public string ContainsWhitespace(string password)
    {
        if (password.Any(character => Char.IsWhiteSpace(character)))
        {
            return "Password cannot contain spaces.";
        }
        return null;
    }

    public void Dispose()
    {
        StateContainer.OnChange -= StateHasChanged;
    }
    
     /*public string IsUniqueUsername(string username)
     {
        using (var context = _dbFactory.CreateDbContext())
        {
            try 
            {
                if(context.Accounts.All(elem => elem.Username != username))
                {
                    return null;
                }
            }
            catch(Exception ex)
            {
                Logger.Log(ex);
            }
            return "Username is already in use.";
        }
    }
    */
}