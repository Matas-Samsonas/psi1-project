@page "/supplierlist/supplierdetails"
@using ClassLibrary
@using System.Collections.ObjectModel
@using Microsoft.EntityFrameworkCore
@using PSI_MobileApp.Extensions
@inject IdStateContainer IdContainer
@inject CurrentUserContainer CurrentUserContainer
@inject IDialogService DialogService
@implements IDisposable
<MudText Typo="Typo.h4">Supplier Details</MudText>

<style>
    .selected {
        background-color: #1E88E5 !important;
    }

        .selected > td {
            color: white !important;
        }

            .selected > td .mud-input {
                color: white !important;
            }
</style>

@if (IdContainer.Id == Guid.Empty)
{
    <MudText Typo="Typo.h4">The supplier was not passed correctly or still loading.</MudText>
}
else
{
    
    <MudText><b>Name:</b> @profile.Name</MudText>
    <MudText><b>Email:</b> @profile.Email </MudText>
    <MudText><b>Phone number:</b> @profile.PhoneNumber </MudText>
    <MudText><b>Address:</b> @profile.TypedAddress.City, @profile.TypedAddress.StreetName st. @profile.TypedAddress.StreetNumber</MudText>
    <MudText><b>Cuisines:</b> 
        @foreach (var cuisine in profile.CuisineArray)
        {
            var last = profile.CuisineArray.LastOrDefault();
            if (cuisine != last)
                @(cuisine + ", ")
            else
                @cuisine
        } 
    </MudText>

    <MudTable ServerData="@(new Func<TableState, Task<TableData<Advertisement>>>(ServerReload))"  OnRowClick="RowClickEvent" Hover="true" @ref="mudTable" RowClassFunc="@SelectAdvertisement" T="Advertisement" Breakpoint="Breakpoint.Sm">
        <HeaderContent>
            <MudTh><MudTableSortLabel SortLabel="name" T="Advertisement">Name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="making_time" T="Advertisement">Time of making</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="pickup_time" T="Advertisement">Pickup Time</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="price" T="Advertisement">Price</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="reserved" T="Advertisement">Is Reserved</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.MealName</MudTd>
            <MudTd DataLabel="Time Of Making">@context.TimeOfMaking</MudTd>
            <MudTd DataLabel="Pickup Deadline">@context.PickupTimeSpan</MudTd>
            <MudTd DataLabel="Price">@context.Cost</MudTd>
            <MudTd DataLabel="Is Reserved">@(context.Buyer != null)</MudTd>
        </RowTemplate>
    </MudTable>

    @if (true) 
            @*if the user is a provider*@
    {
        <MudButton Variant="Variant.Filled" OnClick="AddOrderCommand" >
            Add order
        </MudButton>
        <MudButton Variant="Variant.Filled" OnClick="RemoveOrderCommand">
            Remove order
        </MudButton>
    }
    @if (true) @*if the user is a customer/regular user*@
    {
        <MudButton Variant="Variant.Filled" OnClick="BookOrderCommand">
            Book order
        </MudButton>
    }
    
}

@code {
    private ProjectDatabaseContext dbContext;
    private ObservableCollection<Advertisement> adverts;
    private MudTable<Advertisement> mudTable;
    private Advertisement SelectedAdvertisement { get; set; }
    private int selectedRowNumber = -1;
    private ProfileClasses.Profile profile;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        dbContext = new();
        profile = dbContext.Profiles.Where(p => p.Id == IdContainer.Id).FirstOrDefault();
        dbContext.Advertisements.Add(new Advertisement() { Cost = 2, Buyer = profile, Distributor = dbContext.Distributors.Where(p => p.Id == IdContainer.Id).FirstOrDefault(), MealName = "name", Id = Guid.NewGuid(), PickupTimeSpan = new(), TimeOfMaking = new() });
        dbContext.SaveChanges();
        adverts = dbContext.Advertisements.Where(a => a.Distributor.Id == profile.Id).ToObservableCollection();
 
    }

    public string SelectAdvertisement(Advertisement advert, int rowNumber)
    {
        if (selectedRowNumber == rowNumber)
        {
            selectedRowNumber = -1;
            SelectedAdvertisement = null;
            return String.Empty;
        }
        else if (mudTable.SelectedItem != null && mudTable.SelectedItem.Equals(advert) && SelectedAdvertisement != null)
        {
            selectedRowNumber = rowNumber;
            SelectedAdvertisement = advert;
            return "selected";
        }
        else
        {
            return String.Empty;
        }

    }

    public async Task AddOrderCommand()
    {
        DialogOptions noHeader = new DialogOptions() { NoHeader = true };

        var dialog = DialogService.Show<AddOrderDialog>("", noHeader);
        var res = await dialog.Result;

        if (!res.Cancelled)
        {
            var adv = res.Data as Advertisement;
            adv.Id = Guid.NewGuid();
            var search = dbContext.Distributors.Where(d => d.Id == IdContainer.Id).FirstOrDefault();
            var tmp = new ObservableCollection<ProfileClasses.Profile>();
            tmp.Add(profile);
            //if (search != null)
            //{
            //    search.Advertisements = new ObservableCollection<Advertisement>();
            //    profile.Subscriptions = new ObservableCollection<ProfileClasses.Distributor>();
            //    profile.Subscriptions.Add(search);
            //    profile.Reservations = new ObservableCollection<Advertisement>();
            //    search.Subscribers = tmp;
            adv.Distributor = search;
            //    adv.Buyer = dbContext.Profiles.Where(p => p.Id == ProfileContainer.CurrentAccount.Id).FirstOrDefault();
            //}
            //else
            //{
            //    var disti = new ProfileClasses.Distributor()
            //        {
            //            Id = IdContainer.Id,
            //            Rating = 5,
            //            RatingAmount = 100,
            //            Subscribers = tmp,
            //            Advertisements = new ObservableCollection<Advertisement>(dbContext.Advertisements.Where(a => a.Distributor.Id == IdContainer.Id))
            //        };
            //    dbContext.Add<ProfileClasses.Distributor>(disti);
            //    dbContext.SaveChanges();
            //}
            dbContext.Add<Advertisement>(adv as Advertisement);

            await dbContext.SaveChangesAsync();
            await mudTable.ReloadServerData();
            //adverts.Add(adv as Advertisement);
        }
    }

    private void RowClickEvent(TableRowClickEventArgs<Advertisement> tableRowClickEventArgs)
    {
        SelectedAdvertisement = tableRowClickEventArgs.Item;
    }

    private async Task RemoveOrderCommand()
    {
        dbContext.Advertisements.Remove(SelectedAdvertisement);
        await dbContext.SaveChangesAsync();
        await mudTable.ReloadServerData();
    }

    private async Task BookOrderCommand()
    {
        if (SelectedAdvertisement != null)
        {
            dbContext.Advertisements.FirstOrDefault(i => i.Equals(SelectedAdvertisement)).Buyer = CurrentUserContainer.GetUserProfile();
            await dbContext.SaveChangesAsync();
            await mudTable.ReloadServerData();
        }
    }

    public void Dispose()
    {

    }

    private TimeSpan HandleTime(TimeSpan timeSpan, TimeSpan creationTime)
    {
        return (creationTime + timeSpan) - new TimeSpan(DateTime.Now.Hour, DateTime.Now.Minute, DateTime.Now.Second);
    }

    private IEnumerable<Advertisement> pagedData;
    private int totalItems;
    private async Task<TableData<Advertisement>> ServerReload(TableState state)
    {
        var query = dbContext.Advertisements.Where(a => a.Distributor.Id == profile.Id);
        //IEnumerable<Advertisement> data = await query.ToListAsync();
        await Task.Delay(300);
        
        switch(state.SortLabel)
        {
            case "name":
                query = query.OrderByDirection(state.SortDirection, o => o.MealName);
                break;
            case "making_time":
                query = query.OrderByDirection(state.SortDirection, o => o.TimeOfMaking);
                break;
            case "pickup_time":
                query = query.OrderByDirection(state.SortDirection, o => o.PickupTimeSpan);
                break;
            case "price":
                query = query.OrderByDirection(state.SortDirection, o => o.Cost);
                break;
            case "reserved":
                query = query.OrderByDirection(state.SortDirection, o => (o.Buyer != null));
                break;
        }

        totalItems = query.Count();
        pagedData = await query.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArrayAsync();
        return new TableData<Advertisement>() { TotalItems = totalItems, Items = pagedData };
    }
}
